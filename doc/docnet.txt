case NETRHOST: // ipaddr host port --
	SDLNet_ResolveHost((IPaddress*)*(NOS-1),(char*)(*NOS),TOS);
	NOS-=2;TOS=*NOS;NOS--;
	continue;
case NETRIP: // ip -- "host"
	TOS=(int64_t)SDLNet_ResolveIP((IPaddress*)TOS);
	continue;
case NETCHECK: // res -- sock
	TOS=SDLNet_SocketReady((SDLNet_GenericSocket)TOS);
	continue;
case NETTOPEN: // ip -- socket
	TOS=(int64_t)SDLNet_TCP_Open((IPaddress*)TOS);
	continue;
case NETTACCEPT: // newsock -- sock
	TOS=(int64_t)SDLNet_TCP_Accept((TCPsocket)TOS);
	continue;
case NETTPADR: // ipadress -- sock
	TOS=(int64_t)SDLNet_TCP_GetPeerAddress((TCPsocket)TOS);
	continue;
case NETTSEND: // sock msg len -- er
	TOS=(int64_t)SDLNet_TCP_Send((TCPsocket)(*(NOS-1)),(void*)(*NOS),TOS);
	NOS-=2;
	continue;
case NETTRECV: // sock data maxlen -- len
	TOS=(int64_t)SDLNet_TCP_Recv((TCPsocket)(*(NOS-1)),(void*)(*NOS),TOS);
	NOS-=2;
	continue;
case NETTCLOSE: // socket --
	SDLNet_TCP_Close((TCPsocket)TOS);
	TOS=*NOS;NOS--;
	continue;
case UDPALLOC: //size -- udp
	TOS=(int64_t)SDLNet_AllocPacket(TOS);
	continue;
case UDPFREE: // pack --
	SDLNet_FreePacket((UDPpacket *)TOS);
	TOS=*NOS;NOS--;
	continue;
case UDPOPEN: // port --sockudp
	TOS=(int64_t)SDLNet_UDP_Open(TOS);
	continue;
case UDPBIN: // son channel,ipa -- err
	TOS=(int64_t)SDLNet_UDP_Bind((UDPsocket)*(NOS-1),*NOS,(IPaddress *)TOS);
	NOS-=2;
	continue;
case UDPUNBIN: // sock channel --
	SDLNet_UDP_Unbind((UDPsocket)*NOS,TOS);
	NOS--;TOS=*NOS;NOS--;
	continue;
case UDPPEER: // udp channel -- ipadress
	TOS=(int64_t)SDLNet_UDP_GetPeerAddress((UDPsocket)*NOS,TOS);
	NOS--;
	continue;
case UDPSEND: // sock channel,pack -- len
	TOS=(int64_t)SDLNet_UDP_Send((UDPsocket)*(NOS-1),*NOS,(UDPpacket *)TOS);
	NOS-=2;
	continue;
case UDPRECV: // sock pack -- len
	TOS=(int64_t)SDLNet_UDP_Recv((UDPsocket)*NOS,(UDPpacket *)TOS);
	NOS--;
	continue;
case UDPCLOSE: // sock --
	SDLNet_UDP_Close((UDPsocket)TOS);
	TOS=*NOS;NOS--;
	continue;
case NETSET: // max -- set
	TOS=(int64_t)SDLNet_AllocSocketSet(TOS);
	continue;
case TCPADD: // set soc --
	SDLNet_TCP_AddSocket((SDLNet_SocketSet)*NOS,(TCPsocket)TOS);
	NOS--;TOS=*NOS;NOS--;
	continue;
case UDPADD: // set soc --
	SDLNet_UDP_AddSocket((SDLNet_SocketSet)*NOS,(UDPsocket)TOS);
	NOS--;TOS=*NOS;NOS--;
	continue;
case TCPDEL: // set soc --
	SDLNet_TCP_DelSocket((SDLNet_SocketSet)*NOS,(TCPsocket)TOS);
	NOS--;TOS=*NOS;NOS--;
	continue;
case UDPDEL: // set soc --
	SDLNet_UDP_DelSocket((SDLNet_SocketSet)*NOS,(UDPsocket)TOS);
	NOS--;TOS=*NOS;NOS--;
	continue;
case NETSETCHECK: // set timeout -- cnt
	TOS=SDLNet_CheckSockets((SDLNet_SocketSet)*NOS,TOS);
	NOS--;
	continue;
case SETFREE: // set --
	SDLNet_FreeSocketSet((SDLNet_SocketSet)TOS);
	TOS=*NOS;NOS--;
	continue;
