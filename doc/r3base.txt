;	| ; End of Word
(	| ; Start block to build IF and WHILE
)	| ; End block to build IF and WHILE
[	| ; Start nameless definition
]	| -- v	; End nameless definitions
EX	| v --	; Run a word through your address
0?	| a -- a 	; is TOS=Zero? conditional
1?	| a -- a 	; is TOS<>Zero? conditional
+?	| a -- a 	; is TOS>=0?
-?	| a -- a 	; is TOS<0?
<?	| a b -- a 	; is a<b? remove TOS
>?	| a b -- a 	; is a>b? remove TOS
=?	| a b -- a 	; is a=b? remove TOS
>=?	| a b -- a 	; is a>=b? remove TOS
<=?	| a b -- a 	; is a<=b? remove TOS
<>?	| a b -- a 	; is a<>b? remove TOS
AND?	| a b -- c 	; is a AND b? remove TOS
NAND?	| a b -- c 	; is a NAND b? remove TOS
BT?	| a b c -- a	; is b<=a<=c? remove TOS NOS
DUP	| a -- a a
DROP	| a --
OVER	| a b -- a b a
PICK2	| a b c -- a b c a
PICK3	| a b c d -- a b c d a
PICK4	| a b c d e -- a b c d e a
SWAP	| a b -- b a
NIP	| a b -- b
ROT	| a b c -- b c a
2DUP	| a b -- a b a b
2DROP	| a b --
3DROP	| a b c --
4DROP	| a b c d --
2OVER	| a b c d -- a b c d a b
2SWAP	| a b c d -- c d a b
>R	| a --		; r: -- a
R>	| -- a 		; r: a --
R@	| -- a 		; r: a -- a
AND	| a b -- c
OR	| a b -- c
XOR	| a b -- c
NOT	| a -- b
+	| a b -- c
-	| a b -- c
*	| a b -- c
/	| a b -- c
<<	| a b -- c
>>	| a b -- c
>>>	| a b -- c
MOD	| a b -- c
/MOD	| a b -- c d
*/	| a b c -- d
*>>	| a b c -- d
<</	| a b c -- d
NEG	| a -- b
ABS	| a -- b
SQRT	| a -- b
CLZ	| a -- b
@	| a -- [a]
C@	| a -- b[a]
Q@	| a -- q[a]
@+	| a -- b [a]
C@+	| a -- b b[a]
Q@+	| a -- b q[a]
!	| a b --
C!	| a b --
Q!	| a b --
!+	| a b -- c
C!+	| a b -- c
Q!+	| a b -- c
+!	| a b --
C+!	| a b --
Q+!	| a b --
>A	| a --	; load register A
A>	| -- a	; push register A
A@	| -- a
A!	| a --
A+	| a --
A@+	| -- a
A!+	| a --
>B	| a --	; load register B
B>	| -- a	; push register B
B@	| -- a
B!	| a --
B+	| a --
B@+	| -- a
B!+	| a --
MOVE	| dst src cnt --	; copy from SRC to DST, CNT dword
MOVE>	| dst src cnt --	; copy from SRC to DST, CNT dword in reverse
FILL	| dst val cnt --	; fill from DST, CNT dword with VAL
CMOVE	| dst src cnt --	; copy from SRC to DST, CNT bytes
CMOVE>	| dst src cnt --	; copy from SRC to DST, CNT bytes in reverse
CFILL	| dst val cnt --	; fill from DST, CNT bytes with VAL
QMOVE	| dst src cnt --	; copy from SRC to DST, CNT qwords
QMOVE>	| dst src cnt --	; copy from SRC to DST, CNT qwords in reverse
QFILL	| dst val cnt --	; fill from DST, CNT qwords with VAL
UPDATE	| --	; update SO events
REDRAW	| --	; refresh graphic buffer
MEM	| -- a	; start memory free
SW	| -- a	; screen width
SH	| -- a	; screen height
VFRAME	| -- a	; frame buffer adress
XYPEN	| -- x y ; position of mouse or pen
BPEN	| -- a	; key state of mouse or pen
KEY	| -- a	; key code
CHAR	| -- a	; character ascii code
MSEC	| -- a	; milisecond of system
TIME	| -- a	; hour(8bits):min(8bits):sec(8bits)
DATE	| -- a	; year(16bits):month(8bits):day(8bits)
LOAD	| m "filename" -- lm	; load file to m, return last adress is lm
SAVE	| m cnt "filename" --	; save file from m, cnt bytes, m=0 deletefile
APPEND	| m cnt "filename" --	; append file from m, cnt bytes, m=0 deletefile
FFIRST	| "" -- s	; get first struct of folder ""
FNEXT	| a -- s	; next struct or 0 to end
SYS	| "sys" --	; call SO to run program
INK	| -- color	; value of color
'INK	| -- 'ink ; adress of color to set
ALPHA	| a --	; set alpha value
OPX		| -- opx	; last x point
OPY		| -- opy	; last y point
OP	| x y --	; set last point
LINE	| x y --	; lineto
CURVE	| x y x y --	; curve cuadratic bezier
CURVE3	| x y x y x y --	; curve qubic bezier
PLINE	| x y --	; lineto polygon
PCURVE	| x y x y --	; curve cuadratic bezier polygon
PCURVE3	| x y x y x y --	; curve qubic bezier polygon
POLI	| --	; fill polygon
SLOAD	| "" -- s
SFREE	| s --
SPLAY	| s --	; 0 stop sound
MLOAD	| "" -- m
MFREE	| m --
MPLAY	| m --	; 0 stop music

only in r4v

VIDEO	| "file" w h --  ; 0 close video
VIDEOSHOW	| w h -- v
VIDEOSIZE	| w h --
